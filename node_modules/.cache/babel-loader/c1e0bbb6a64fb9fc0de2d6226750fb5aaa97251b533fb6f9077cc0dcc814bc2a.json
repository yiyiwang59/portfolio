{"ast":null,"code":"/**\n * @import {ElementContent, Element, Root} from 'hast'\n * @import {LanguageFn} from 'lowlight'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {Readonly<Record<string, ReadonlyArray<string> | string>> | null | undefined} [aliases={}]\n *   Register more aliases (optional);\n *   passed to `lowlight.registerAlias`.\n * @property {boolean | null | undefined} [detect=false]\n *   Highlight code without language classes by guessing its programming\n *   language (default: `false`).\n * @property {Readonly<Record<string, LanguageFn>> | null | undefined} [languages]\n *   Register languages (default: `common`);\n *   passed to `lowlight.register`.\n * @property {ReadonlyArray<string> | null | undefined} [plainText=[]]\n *   List of language names to not highlight (optional);\n *   note you can also add `no-highlight` classes.\n * @property {string | null | undefined} [prefix='hljs-']\n *   Class prefix (default: `'hljs-'`).\n * @property {ReadonlyArray<string> | null | undefined} [subset]\n *   Names of languages to check when detecting (default: all registered\n *   languages).\n */\n\nimport { toText } from 'hast-util-to-text';\nimport { common, createLowlight } from 'lowlight';\nimport { visit } from 'unist-util-visit';\n\n/** @type {Options} */\nconst emptyOptions = {};\n\n/**\n * Apply syntax highlighting.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeHighlight(options) {\n  const settings = options || emptyOptions;\n  const aliases = settings.aliases;\n  const detect = settings.detect || false;\n  const languages = settings.languages || common;\n  const plainText = settings.plainText;\n  const prefix = settings.prefix;\n  const subset = settings.subset;\n  let name = 'hljs';\n  const lowlight = createLowlight(languages);\n  if (aliases) {\n    lowlight.registerAlias(aliases);\n  }\n  if (prefix) {\n    const pos = prefix.indexOf('-');\n    name = pos === -1 ? prefix : prefix.slice(0, pos);\n  }\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    visit(tree, 'element', function (node, _, parent) {\n      if (node.tagName !== 'code' || !parent || parent.type !== 'element' || parent.tagName !== 'pre') {\n        return;\n      }\n      const lang = language(node);\n      if (lang === false || !lang && !detect || lang && plainText && plainText.includes(lang)) {\n        return;\n      }\n      if (!Array.isArray(node.properties.className)) {\n        node.properties.className = [];\n      }\n      if (!node.properties.className.includes(name)) {\n        node.properties.className.unshift(name);\n      }\n      const text = toText(node, {\n        whitespace: 'pre'\n      });\n      /** @type {Root} */\n      let result;\n      try {\n        result = lang ? lowlight.highlight(lang, text, {\n          prefix\n        }) : lowlight.highlightAuto(text, {\n          prefix,\n          subset\n        });\n      } catch (error) {\n        const cause = /** @type {Error} */error;\n        if (lang && /Unknown language/.test(cause.message)) {\n          file.message('Cannot highlight as `' + lang + '`, it’s not registered', {\n            ancestors: [parent, node],\n            cause,\n            place: node.position,\n            ruleId: 'missing-language',\n            source: 'rehype-highlight'\n          });\n\n          /* c8 ignore next 5 -- throw arbitrary hljs errors */\n          return;\n        }\n        throw cause;\n      }\n      if (!lang && result.data && result.data.language) {\n        node.properties.className.push('language-' + result.data.language);\n      }\n      if (result.children.length > 0) {\n        node.children = /** @type {Array<ElementContent>} */result.children;\n      }\n    });\n  };\n}\n\n/**\n * Get the programming language of `node`.\n *\n * @param {Element} node\n *   Node.\n * @returns {false | string | undefined}\n *   Language or `undefined`, or `false` when an explikcit `no-highlight` class\n *   is used.\n */\nfunction language(node) {\n  const list = node.properties.className;\n  let index = -1;\n  if (!Array.isArray(list)) {\n    return;\n  }\n\n  /** @type {string | undefined} */\n  let name;\n  while (++index < list.length) {\n    const value = String(list[index]);\n    if (value === 'no-highlight' || value === 'nohighlight') {\n      return false;\n    }\n    if (!name && value.slice(0, 5) === 'lang-') {\n      name = value.slice(5);\n    }\n    if (!name && value.slice(0, 9) === 'language-') {\n      name = value.slice(9);\n    }\n  }\n  return name;\n}","map":{"version":3,"names":["toText","common","createLowlight","visit","emptyOptions","rehypeHighlight","options","settings","aliases","detect","languages","plainText","prefix","subset","name","lowlight","registerAlias","pos","indexOf","slice","tree","file","node","_","parent","tagName","type","lang","language","includes","Array","isArray","properties","className","unshift","text","whitespace","result","highlight","highlightAuto","error","cause","test","message","ancestors","place","position","ruleId","source","data","push","children","length","list","index","value","String"],"sources":["/Users/yiyiwang/Documents/coding/projects/portfolio/node_modules/rehype-highlight/lib/index.js"],"sourcesContent":["/**\n * @import {ElementContent, Element, Root} from 'hast'\n * @import {LanguageFn} from 'lowlight'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {Readonly<Record<string, ReadonlyArray<string> | string>> | null | undefined} [aliases={}]\n *   Register more aliases (optional);\n *   passed to `lowlight.registerAlias`.\n * @property {boolean | null | undefined} [detect=false]\n *   Highlight code without language classes by guessing its programming\n *   language (default: `false`).\n * @property {Readonly<Record<string, LanguageFn>> | null | undefined} [languages]\n *   Register languages (default: `common`);\n *   passed to `lowlight.register`.\n * @property {ReadonlyArray<string> | null | undefined} [plainText=[]]\n *   List of language names to not highlight (optional);\n *   note you can also add `no-highlight` classes.\n * @property {string | null | undefined} [prefix='hljs-']\n *   Class prefix (default: `'hljs-'`).\n * @property {ReadonlyArray<string> | null | undefined} [subset]\n *   Names of languages to check when detecting (default: all registered\n *   languages).\n */\n\nimport {toText} from 'hast-util-to-text'\nimport {common, createLowlight} from 'lowlight'\nimport {visit} from 'unist-util-visit'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Apply syntax highlighting.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeHighlight(options) {\n  const settings = options || emptyOptions\n  const aliases = settings.aliases\n  const detect = settings.detect || false\n  const languages = settings.languages || common\n  const plainText = settings.plainText\n  const prefix = settings.prefix\n  const subset = settings.subset\n  let name = 'hljs'\n\n  const lowlight = createLowlight(languages)\n\n  if (aliases) {\n    lowlight.registerAlias(aliases)\n  }\n\n  if (prefix) {\n    const pos = prefix.indexOf('-')\n    name = pos === -1 ? prefix : prefix.slice(0, pos)\n  }\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    visit(tree, 'element', function (node, _, parent) {\n      if (\n        node.tagName !== 'code' ||\n        !parent ||\n        parent.type !== 'element' ||\n        parent.tagName !== 'pre'\n      ) {\n        return\n      }\n\n      const lang = language(node)\n\n      if (\n        lang === false ||\n        (!lang && !detect) ||\n        (lang && plainText && plainText.includes(lang))\n      ) {\n        return\n      }\n\n      if (!Array.isArray(node.properties.className)) {\n        node.properties.className = []\n      }\n\n      if (!node.properties.className.includes(name)) {\n        node.properties.className.unshift(name)\n      }\n\n      const text = toText(node, {whitespace: 'pre'})\n      /** @type {Root} */\n      let result\n\n      try {\n        result = lang\n          ? lowlight.highlight(lang, text, {prefix})\n          : lowlight.highlightAuto(text, {prefix, subset})\n      } catch (error) {\n        const cause = /** @type {Error} */ (error)\n\n        if (lang && /Unknown language/.test(cause.message)) {\n          file.message(\n            'Cannot highlight as `' + lang + '`, it’s not registered',\n            {\n              ancestors: [parent, node],\n              cause,\n              place: node.position,\n              ruleId: 'missing-language',\n              source: 'rehype-highlight'\n            }\n          )\n\n          /* c8 ignore next 5 -- throw arbitrary hljs errors */\n          return\n        }\n\n        throw cause\n      }\n\n      if (!lang && result.data && result.data.language) {\n        node.properties.className.push('language-' + result.data.language)\n      }\n\n      if (result.children.length > 0) {\n        node.children = /** @type {Array<ElementContent>} */ (result.children)\n      }\n    })\n  }\n}\n\n/**\n * Get the programming language of `node`.\n *\n * @param {Element} node\n *   Node.\n * @returns {false | string | undefined}\n *   Language or `undefined`, or `false` when an explikcit `no-highlight` class\n *   is used.\n */\nfunction language(node) {\n  const list = node.properties.className\n  let index = -1\n\n  if (!Array.isArray(list)) {\n    return\n  }\n\n  /** @type {string | undefined} */\n  let name\n\n  while (++index < list.length) {\n    const value = String(list[index])\n\n    if (value === 'no-highlight' || value === 'nohighlight') {\n      return false\n    }\n\n    if (!name && value.slice(0, 5) === 'lang-') {\n      name = value.slice(5)\n    }\n\n    if (!name && value.slice(0, 9) === 'language-') {\n      name = value.slice(9)\n    }\n  }\n\n  return name\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,MAAM,QAAO,mBAAmB;AACxC,SAAQC,MAAM,EAAEC,cAAc,QAAO,UAAU;AAC/C,SAAQC,KAAK,QAAO,kBAAkB;;AAEtC;AACA,MAAMC,YAAY,GAAG,CAAC,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,eAAeA,CAACC,OAAO,EAAE;EAC/C,MAAMC,QAAQ,GAAGD,OAAO,IAAIF,YAAY;EACxC,MAAMI,OAAO,GAAGD,QAAQ,CAACC,OAAO;EAChC,MAAMC,MAAM,GAAGF,QAAQ,CAACE,MAAM,IAAI,KAAK;EACvC,MAAMC,SAAS,GAAGH,QAAQ,CAACG,SAAS,IAAIT,MAAM;EAC9C,MAAMU,SAAS,GAAGJ,QAAQ,CAACI,SAAS;EACpC,MAAMC,MAAM,GAAGL,QAAQ,CAACK,MAAM;EAC9B,MAAMC,MAAM,GAAGN,QAAQ,CAACM,MAAM;EAC9B,IAAIC,IAAI,GAAG,MAAM;EAEjB,MAAMC,QAAQ,GAAGb,cAAc,CAACQ,SAAS,CAAC;EAE1C,IAAIF,OAAO,EAAE;IACXO,QAAQ,CAACC,aAAa,CAACR,OAAO,CAAC;EACjC;EAEA,IAAII,MAAM,EAAE;IACV,MAAMK,GAAG,GAAGL,MAAM,CAACM,OAAO,CAAC,GAAG,CAAC;IAC/BJ,IAAI,GAAGG,GAAG,KAAK,CAAC,CAAC,GAAGL,MAAM,GAAGA,MAAM,CAACO,KAAK,CAAC,CAAC,EAAEF,GAAG,CAAC;EACnD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAO,UAAUG,IAAI,EAAEC,IAAI,EAAE;IAC3BlB,KAAK,CAACiB,IAAI,EAAE,SAAS,EAAE,UAAUE,IAAI,EAAEC,CAAC,EAAEC,MAAM,EAAE;MAChD,IACEF,IAAI,CAACG,OAAO,KAAK,MAAM,IACvB,CAACD,MAAM,IACPA,MAAM,CAACE,IAAI,KAAK,SAAS,IACzBF,MAAM,CAACC,OAAO,KAAK,KAAK,EACxB;QACA;MACF;MAEA,MAAME,IAAI,GAAGC,QAAQ,CAACN,IAAI,CAAC;MAE3B,IACEK,IAAI,KAAK,KAAK,IACb,CAACA,IAAI,IAAI,CAAClB,MAAO,IACjBkB,IAAI,IAAIhB,SAAS,IAAIA,SAAS,CAACkB,QAAQ,CAACF,IAAI,CAAE,EAC/C;QACA;MACF;MAEA,IAAI,CAACG,KAAK,CAACC,OAAO,CAACT,IAAI,CAACU,UAAU,CAACC,SAAS,CAAC,EAAE;QAC7CX,IAAI,CAACU,UAAU,CAACC,SAAS,GAAG,EAAE;MAChC;MAEA,IAAI,CAACX,IAAI,CAACU,UAAU,CAACC,SAAS,CAACJ,QAAQ,CAACf,IAAI,CAAC,EAAE;QAC7CQ,IAAI,CAACU,UAAU,CAACC,SAAS,CAACC,OAAO,CAACpB,IAAI,CAAC;MACzC;MAEA,MAAMqB,IAAI,GAAGnC,MAAM,CAACsB,IAAI,EAAE;QAACc,UAAU,EAAE;MAAK,CAAC,CAAC;MAC9C;MACA,IAAIC,MAAM;MAEV,IAAI;QACFA,MAAM,GAAGV,IAAI,GACTZ,QAAQ,CAACuB,SAAS,CAACX,IAAI,EAAEQ,IAAI,EAAE;UAACvB;QAAM,CAAC,CAAC,GACxCG,QAAQ,CAACwB,aAAa,CAACJ,IAAI,EAAE;UAACvB,MAAM;UAAEC;QAAM,CAAC,CAAC;MACpD,CAAC,CAAC,OAAO2B,KAAK,EAAE;QACd,MAAMC,KAAK,GAAG,oBAAsBD,KAAM;QAE1C,IAAIb,IAAI,IAAI,kBAAkB,CAACe,IAAI,CAACD,KAAK,CAACE,OAAO,CAAC,EAAE;UAClDtB,IAAI,CAACsB,OAAO,CACV,uBAAuB,GAAGhB,IAAI,GAAG,wBAAwB,EACzD;YACEiB,SAAS,EAAE,CAACpB,MAAM,EAAEF,IAAI,CAAC;YACzBmB,KAAK;YACLI,KAAK,EAAEvB,IAAI,CAACwB,QAAQ;YACpBC,MAAM,EAAE,kBAAkB;YAC1BC,MAAM,EAAE;UACV,CACF,CAAC;;UAED;UACA;QACF;QAEA,MAAMP,KAAK;MACb;MAEA,IAAI,CAACd,IAAI,IAAIU,MAAM,CAACY,IAAI,IAAIZ,MAAM,CAACY,IAAI,CAACrB,QAAQ,EAAE;QAChDN,IAAI,CAACU,UAAU,CAACC,SAAS,CAACiB,IAAI,CAAC,WAAW,GAAGb,MAAM,CAACY,IAAI,CAACrB,QAAQ,CAAC;MACpE;MAEA,IAAIS,MAAM,CAACc,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;QAC9B9B,IAAI,CAAC6B,QAAQ,GAAG,oCAAsCd,MAAM,CAACc,QAAS;MACxE;IACF,CAAC,CAAC;EACJ,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASvB,QAAQA,CAACN,IAAI,EAAE;EACtB,MAAM+B,IAAI,GAAG/B,IAAI,CAACU,UAAU,CAACC,SAAS;EACtC,IAAIqB,KAAK,GAAG,CAAC,CAAC;EAEd,IAAI,CAACxB,KAAK,CAACC,OAAO,CAACsB,IAAI,CAAC,EAAE;IACxB;EACF;;EAEA;EACA,IAAIvC,IAAI;EAER,OAAO,EAAEwC,KAAK,GAAGD,IAAI,CAACD,MAAM,EAAE;IAC5B,MAAMG,KAAK,GAAGC,MAAM,CAACH,IAAI,CAACC,KAAK,CAAC,CAAC;IAEjC,IAAIC,KAAK,KAAK,cAAc,IAAIA,KAAK,KAAK,aAAa,EAAE;MACvD,OAAO,KAAK;IACd;IAEA,IAAI,CAACzC,IAAI,IAAIyC,KAAK,CAACpC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,OAAO,EAAE;MAC1CL,IAAI,GAAGyC,KAAK,CAACpC,KAAK,CAAC,CAAC,CAAC;IACvB;IAEA,IAAI,CAACL,IAAI,IAAIyC,KAAK,CAACpC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,WAAW,EAAE;MAC9CL,IAAI,GAAGyC,KAAK,CAACpC,KAAK,CAAC,CAAC,CAAC;IACvB;EACF;EAEA,OAAOL,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}